// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package schema

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Info struct {
	Address string `json:"address"`
	Hours   string `json:"hours"`
}

type Item struct {
	ItemType  ItemTypes `json:"itemType"`
	Name      string    `json:"name"`
	Action    Actions   `json:"action"`
	CreatedAt time.Time `json:"createdAt"`
}

type Actions string

const (
	ActionsAdd    Actions = "Add"
	ActionsRemove Actions = "Remove"
)

var AllActions = []Actions{
	ActionsAdd,
	ActionsRemove,
}

func (e Actions) IsValid() bool {
	switch e {
	case ActionsAdd, ActionsRemove:
		return true
	}
	return false
}

func (e Actions) String() string {
	return string(e)
}

func (e *Actions) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Actions(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Actions", str)
	}
	return nil
}

func (e Actions) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ItemTypes string

const (
	ItemTypesAppetizer ItemTypes = "Appetizer"
	ItemTypesEntree    ItemTypes = "Entree"
	ItemTypesDessert   ItemTypes = "Dessert"
)

var AllItemTypes = []ItemTypes{
	ItemTypesAppetizer,
	ItemTypesEntree,
	ItemTypesDessert,
}

func (e ItemTypes) IsValid() bool {
	switch e {
	case ItemTypesAppetizer, ItemTypesEntree, ItemTypesDessert:
		return true
	}
	return false
}

func (e ItemTypes) String() string {
	return string(e)
}

func (e *ItemTypes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ItemTypes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ItemTypes", str)
	}
	return nil
}

func (e ItemTypes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
