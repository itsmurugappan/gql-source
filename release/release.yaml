apiVersion: v1
kind: Namespace
metadata:
  name: knative-sources
  labels:
    istio-injection: enabled
    sources.muru.dev/release: devel

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gql-sources-admin
  labels:
    sources.muru.dev/release: devel
aggregationRule:
  clusterRoleSelectors:
    - matchLabels:
        sources.muru.dev/controller: "true"
rules: [] # Rules are automatically filled in by the controller manager.
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gql-sources-core
  labels:
    sources.muru.dev/release: devel
    sources.muru.dev/controller: "true"
rules:
  - apiGroups: [""]
    resources: ["configmaps", "services", "secrets", "events"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  - apiGroups: ["apps"]
    resources: ["deployments", "deployments/finalizers"] # finalizers are needed for the owner reference of the webhook
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  - apiGroups: ["sources.muru.dev"]
    resources: ["*"]
    verbs: ["get", "list", "create", "update", "delete", "deletecollection", "patch", "watch"]
  - apiGroups: ["sources.knative.dev"]
    resources: ["*"]
    verbs: ["get", "list", "create", "update", "delete", "deletecollection", "patch", "watch"]
  - apiGroups: ["serving.knative.dev"]
    resources: ["*"]
    verbs: ["get", "list", "create", "update", "delete", "deletecollection", "patch", "watch"]

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gql-source-controller
  namespace: knative-sources
  labels:
    sources.muru.dev/release: devel

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: gql-sources-controller-admin
  labels:
    sources.muru.dev/release: devel
subjects:
  - kind: ServiceAccount
    name: gql-source-controller
    namespace: knative-sources
roleRef:
  kind: ClusterRole
  name: gql-sources-admin
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    sources.muru.dev/release: devel
    eventing.knative.dev/source: "true"
    duck.knative.dev/source: "true"
    muru.dev/crd-install: "true"
  annotations:
    registry.knative.dev/eventTypes: |
      [
        { "type": "dev.knative.gql.event" }
      ]
  name: gqlsources.sources.muru.dev
spec:
  group: sources.muru.dev
  preserveUnknownFields: false
  validation:
    openAPIV3Schema:
      type: object
      x-kubernetes-preserve-unknown-fields: true
  names:
    categories:
      - all
      - knative
      - eventing
      - sources
    kind: GqlSource
    plural: gqlsources
  scope: Namespaced
  subresources:
    status: {}
  additionalPrinterColumns:
    - name: GqlServer
      type: string
      JSONPath: ".spec.gqlServer"
    - name: Sink
      type: string
      JSONPath: ".spec.sink.ref.name"
    - name: Ready
      type: string
      JSONPath: ".status.conditions[?(@.type==\"Ready\")].status"
    - name: Reason
      type: string
      JSONPath: ".status.conditions[?(@.type==\"Ready\")].reason"
    - name: Age
      type: date
      JSONPath: .metadata.creationTimestamp
  versions:
    - name: v1alpha1
      served: true
      storage: true

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gql-source-config-leader-election
  namespace: knative-sources
  labels:
    sources.muru.dev/release: devel
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################
    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.
    # leaseDuration is how long non-leaders will wait to try to acquire the
    # lock; 15 seconds is the value used by core kubernetes controllers.
    leaseDuration: "15s"
    # renewDeadline is how long a leader will try to renew the lease before
    # giving up; 10 seconds is the value used by core kubernetes controllers.
    renewDeadline: "10s"
    # retryPeriod is how long the leader election client waits between tries of
    # actions; 2 seconds is the value used by core kubernetes controllers.
    retryPeriod: "2s"
    # enabledComponents is a comma-delimited list of component names for which
    # leader election is enabled. Valid values are:
    enabledComponents: "controller,webhook"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gql-source-config-logging
  namespace: knative-sources
  labels:
    sources.muru.dev/release: devel
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # Common configuration for all Knative codebase
    zap-logger-config: |
      {
        "level": "info",
        "development": false,
        "outputPaths": ["stdout"],
        "errorOutputPaths": ["stderr"],
        "encoding": "json",
        "encoderConfig": {
          "timeKey": "ts",
          "levelKey": "level",
          "nameKey": "logger",
          "callerKey": "caller",
          "messageKey": "msg",
          "stacktraceKey": "stacktrace",
          "lineEnding": "",
          "levelEncoder": "",
          "timeEncoder": "iso8601",
          "durationEncoder": "",
          "callerEncoder": ""
        }
      }

    # Log level overrides
    # Changes are be picked up immediately.
    loglevel.controller: "info"
    loglevel.webhook: "info"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gql-source-config-observability
  namespace: knative-sources
  labels:
    sources.muru.dev/release: devel
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # If non-empty, this enables queue proxy writing request logs to stdout.
    # The value determines the shape of the request logs and it must be a valid go text/template.
    # It is important to keep this as a single line. Multiple lines are parsed as separate entities
    # by most collection agents and will split the request logs into multiple records.
    #
    # The following fields and functions are available to the template:
    #
    # Request: An http.Request (see https://golang.org/pkg/net/http/#Request)
    # representing an HTTP request received by the server.
    #
    # Response:
    # struct {
    #   Code    int       // HTTP status code (see https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml)
    #   Size    int       // An int representing the size of the response.
    #   Latency float64   // A float64 representing the latency of the response in seconds.
    # }
    #
    # Revision:
    # struct {
    #   Name          string  // Knative revision name
    #   Namespace     string  // Knative revision namespace
    #   Service       string  // Knative service name
    #   Configuration string  // Knative configuration name
    #   PodName       string  // Name of the pod hosting the revision
    #   PodIP         string  // IP of the pod hosting the revision
    # }
    #
    logging.request-log-template: '{"httpRequest": {"requestMethod": "{{.Request.Method}}", "requestUrl": "{{js .Request.RequestURI}}", "requestSize": "{{.Request.ContentLength}}", "status": {{.Response.Code}}, "responseSize": "{{.Response.Size}}", "userAgent": "{{js .Request.UserAgent}}", "remoteIp": "{{js .Request.RemoteAddr}}", "serverIp": "{{.Revision.PodIP}}", "referer": "{{js .Request.Referer}}", "latency": "{{.Response.Latency}}s", "protocol": "{{.Request.Proto}}"}, "traceId": "{{index .Request.Header "X-B3-Traceid"}}"}'

    # metrics.backend-destination field specifies the system metrics destination.
    # It supports either prometheus (the default) or stackdriver.
    # Note: Using stackdriver will incur additional charges
    metrics.backend-destination: prometheus

    # metrics.request-metrics-backend-destination specifies the request metrics
    # destination. If non-empty, it enables queue proxy to send request metrics.
    # Currently supported values: prometheus, stackdriver.
    metrics.request-metrics-backend-destination: prometheus

    # metrics.stackdriver-project-id field specifies the stackdriver project ID. This
    # field is optional. When running on GCE, application default credentials will be
    # used if this field is not provided.
    metrics.stackdriver-project-id: "<your stackdriver project id>"

    # metrics.allow-stackdriver-custom-metrics indicates whether it is allowed to send metrics to
    # Stackdriver using "global" resource type and custom metric type if the
    # metrics are not supported by "knative_revision" resource type. Setting this
    # flag to "true" could cause extra Stackdriver charge.
    # If metrics.backend-destination is not Stackdriver, this is ignored.
    metrics.allow-stackdriver-custom-metrics: "false"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gql-source-controller
  namespace: knative-sources
  labels:
    sources.muru.dev/release: devel
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gql-source-controller
  template:
    metadata:
      labels:
        app: gql-source-controller
    spec:
      serviceAccountName: gql-source-controller
      containers:
        - name: controller
          terminationMessagePolicy: FallbackToLogsOnError
          image: docker.io/murugappans/controller@sha256:3d902b76055f8b8238ccec1ece180beead3bc0c69892cd53127f9cc8cecee592
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          env:
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONFIG_LOGGING_NAME
              value: gql-source-config-logging
            - name: CONFIG_OBSERVABILITY_NAME
              value: gql-source-config-observability
            - name: CONFIG_LEADERELECTION_NAME
              value: gql-source-config-leader-election
            - name: METRICS_DOMAIN
              value: muru.dev/sources
            - name: GQL_RA_IMAGE
              value: docker.io/murugappans/receive_adapter@sha256:ec31b4fe15b9484b88103bd114ddf88a8d1e959c3697c0b883b355bfa48f64e3
          securityContext:
            allowPrivilegeEscalation: false
          ports:
            - name: metrics
              containerPort: 9090

---
